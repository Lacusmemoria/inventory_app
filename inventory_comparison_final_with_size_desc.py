import streamlit as st
import pandas as pd
from io import BytesIO

st.title("üì¶ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    data = pd.read_excel(uploaded_file, sheet_name=0)

    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
    data.columns = [col.strip().lower() for col in data.columns]

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    column_mapping = {
        'item id': 'item id',
        'style code': 'style code',
        'color cod': 'color cod',
        'size': 'size desc',  # –∑–∞–º–µ–Ω—è–µ–º size –Ω–∞ size desc
        'style desc': 'style desc',
        'line': 'line'
    }

    # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    compare_options = {
        "–ü–æ–ª–Ω—ã–π SKU (Item Id)": [column_mapping['item id']],
        "SKU –±–µ–∑ —Å–µ–∑–æ–Ω–∞ (Style Code + Color Cod + Size)": [column_mapping['style code'], column_mapping['color cod'], column_mapping['size']],
        "–ê—Ä—Ç–∏–∫—É–ª + –¶–≤–µ—Ç (Style Code + Color Cod)": [column_mapping['style code'], column_mapping['color cod']],
        "–¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª (Style Code)": [column_mapping['style code']]
    }
    compare_by = st.selectbox("–°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–æ:", list(compare_options.keys()))
    group_cols = compare_options[compare_by] + [column_mapping['style desc'], column_mapping['line']]

    # –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–π
    loc_options = data['store desc'].unique()
    loc1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é:", loc_options)
    loc2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –ª–æ–∫–∞—Ü–∏—é:", loc_options, index=1)

    if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å"):
        def prepare_data(df, location):
            grouped = df[df['store desc'] == location].groupby(group_cols, as_index=False)['quantity'].sum()
            grouped = grouped.rename(columns={'quantity': f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {location}'})
            return grouped

        missing_columns = [col for col in group_cols if col not in data.columns]
        if missing_columns:
            st.error(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_columns)}")
        else:
            df1 = prepare_data(data, loc1)
            df2 = prepare_data(data, loc2)

            result = pd.merge(df1, df2, on=group_cols, how='outer').fillna(0)
            result['–†–∞–∑–Ω–∏—Ü–∞'] = result[f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {loc1}'] - result[f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {loc2}']

            def get_status(row):
                q1 = row[f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {loc1}']
                q2 = row[f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ {loc2}']
                if q1 > 0 and q2 > 0:
                    return "–¢–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏"
                elif q1 > 0:
                    return f"–¢–æ–≤–∞—Ä –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞—Ü–∏–∏ {loc1}"
                elif q2 > 0:
                    return f"–¢–æ–≤–∞—Ä –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞—Ü–∏–∏ {loc2}"
                else:
                    return "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

            result['–°—Ç–∞—Ç—É—Å'] = result.apply(get_status, axis=1)

            st.dataframe(result)

            @st.cache_data
            def convert_df(df):
                output = BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    df.to_excel(writer, index=False)
                return output.getvalue()

            excel = convert_df(result)

            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel",
                data=excel,
                file_name=f"—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_{loc1}_–∏_{loc2}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
